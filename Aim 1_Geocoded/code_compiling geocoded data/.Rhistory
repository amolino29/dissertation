RPL_THEME4_USA = RPL_THEME4,
RPL_THEMES_USA = RPL_THEMES)
### Drop -999 values
svi_state <- svi_state %>% mutate(RPL_THEMES = ifelse(RPL_THEMES==-999, NA, RPL_THEMES)) %>% select(FIPS, RPL_THEMES)
svi_usa   <- svi_usa   %>% mutate(RPL_THEMES_USA = ifelse(RPL_THEMES_USA==-999, NA, RPL_THEMES_USA)) %>% select(FIPS, RPL_THEMES_USA)
### Verify that the SVI from the state vs. country data are different, confirmed
svi_both <- merge(svi_state, svi_usa, by="FIPS", all=TRUE)
svi_both <- svi_both %>% rename(GEOID = FIPS)
### Create histogram
# All fairly uniform which makes sense since everything is based off of Washington
svi_both %>% ggplot(aes(x=RPL_THEMES)) +
geom_histogram(binwidth=0.02, fill="#0072B2", color="gray20") +
theme_minimal() +
ggtitle("State-Based SVI in Washington Distribution")
svi_both %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
ggplot(aes(x=RPL_THEMES)) +
geom_histogram(binwidth=0.02, fill="#009E73", color="gray20") +
theme_minimal() +
ggtitle("State-Based SVI in King County Distribution")
svi_both %>% ggplot(aes(x=RPL_THEMES_USA)) +
geom_histogram(binwidth=0.02, fill="#0072B2", color="gray20") +
theme_minimal() +
ggtitle("USA SVI in Washington Distribution")
svi_both %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
ggplot(aes(x=RPL_THEMES_USA)) +
geom_histogram(binwidth=0.02, fill="#009E73", color="gray20") +
theme_minimal() +
ggtitle("USA SVI in King County Distribution")
### Setup and pulling in packages
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(table1)
library(knitr)
library(kableExtra)
library(tidyverse)
library(dplyr)
library(lubridate)
library(tidycensus)
library(haven)
### Pull in list of 2020 Washington Census tracts
wa_tracts2020 <- read.csv("census tracts/acs_2020_kingcounty.csv")
table(wa_tracts2020$king_county)
### Create list of Washington census tracts
list_wa_tracts2020 <- wa_tracts2020$GEOID
### Create list of King County census tracts
list_kingcounty_tracts2020 <- wa_tracts2020$GEOID[wa_tracts2020$king_county==1]
### Pull in state-based SVI data
svi_state <- read.csv("CDC_ATSDR/Washington.csv")
svi_state <- svi_state %>% select(STATE, FIPS, LOCATION, RPL_THEME1, RPL_THEME2, RPL_THEME3, RPL_THEME4, RPL_THEMES)
### Pull in all SVI data
svi_usa <- read.csv("CDC_ATSDR/SVI_2020_US.csv") %>% subset(STATE=="Washington")
svi_usa <- svi_usa %>% select(STATE, FIPS, LOCATION, RPL_THEME1, RPL_THEME2, RPL_THEME3, RPL_THEME4, RPL_THEMES) %>%
rename(RPL_THEME1_USA = RPL_THEME1,
RPL_THEME2_USA = RPL_THEME2,
RPL_THEME3_USA = RPL_THEME3,
RPL_THEME4_USA = RPL_THEME4,
RPL_THEMES_USA = RPL_THEMES)
### Drop -999 values
svi_state <- svi_state %>% mutate(RPL_THEMES = ifelse(RPL_THEMES==-999, NA, RPL_THEMES)) %>% select(FIPS, RPL_THEMES)
svi_usa   <- svi_usa   %>% mutate(RPL_THEMES_USA = ifelse(RPL_THEMES_USA==-999, NA, RPL_THEMES_USA)) %>% select(FIPS, RPL_THEMES_USA)
### Verify that the SVI from the state vs. country data are different, confirmed
svi_both <- merge(svi_state, svi_usa, by="FIPS", all=TRUE)
svi_both <- svi_both %>% rename(GEOID = FIPS)
### Create histogram
# All fairly uniform which makes sense since everything is based off of Washington
svi_both %>% ggplot(aes(x=RPL_THEMES)) +
geom_histogram(binwidth=0.02, fill="#0072B2", color="gray20") +
theme_minimal() +
ggtitle("State-Based SVI in Washington Distribution")
svi_both %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
ggplot(aes(x=RPL_THEMES)) +
geom_histogram(binwidth=0.02, fill="#009E73", color="gray20") +
theme_minimal() +
ggtitle("State-Based SVI in King County Distribution")
svi_both %>% ggplot(aes(x=RPL_THEMES_USA)) +
geom_histogram(binwidth=0.02, fill="#0072B2", color="gray20") +
theme_minimal() +
ggtitle("USA SVI in Washington Distribution")
svi_both %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
ggplot(aes(x=RPL_THEMES_USA)) +
geom_histogram(binwidth=0.02, fill="#009E73", color="gray20") +
theme_minimal() +
ggtitle("USA SVI in King County Distribution")
### Pull in neighborhood affluence data, RDA file
load("ICPSR_38528/DS0004/38528-0004-Data.rda")
affluence <- da38528.0004
rm(da38528.0004)
### Only keep tract and affluence variable, and then only keep tracts within Washington to create the distribution
affluence <- affluence %>% filter(TRACT_FIPS20 %in% list_wa_tracts2020) %>% select(TRACT_FIPS20, AFFLUENCE16_20, PED3_16_20, PFAMINCGE125K16_20, PPROF16_20)
affluence <- affluence %>% rename(GEOID = TRACT_FIPS20)
### Look at distribution of affluence across Washington state (does not go below 0 and does not go above 1)
summary(affluence$AFFLUENCE16_20)
### Make sure you understand affluence --> yes, affluence is just the average of the three variables (proportion of people with a bachelors degree or higher, proportion with income 125k or higher, and proportion of civilian employed population in management, business, science, and arts occupations)
affluence <- affluence %>% mutate(AFFLUENCE16_20_armcreate = (PED3_16_20 + PFAMINCGE125K16_20 + PPROF16_20)/3)
head(affluence)
### Create histogram
affluence %>% ggplot(aes(x=AFFLUENCE16_20)) +
geom_histogram(binwidth=0.02, fill="#0072B2", color="gray20") +
theme_minimal() +
ggtitle("Affluence in Washington Distribution")
affluence %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
ggplot(aes(x=AFFLUENCE16_20)) +
geom_histogram(binwidth=0.02, fill="#009E73", color="gray20") +
theme_minimal() +
ggtitle("Affluence in King County Distribution")
# Set API (https://api.census.gov/data/key_signup.html)
# Andrea's census API: cc34589a2d42af53b62386856cf83e0afbebb21f
census_api_key(key = "cc34589a2d42af53b62386856cf83e0afbebb21f", overwrite=TRUE, install=TRUE)
readRenviron("~/.Renviron")
# Load ACS variable names to check variables being used
acs_vars_2020 <- load_variables(2020, "acs5", cache = TRUE)
# Housing cost burden: B25106
# B25106_001: denominator --> total number of occupied housing units
# B25106_006, B25106_010, B25106_014, B25106_018, B25106_022, B25106_028, B25106_032, B25106_036, B25106_040, B25106_044: all those who spend 30% or more on their
# B25106_023, B25106_045: zero or negative income
# B25106_046: no cash rent variables
acs_housingcost <- get_acs(geography="tract",
variables=c("B25106_001",
"B25106_006", "B25106_010", "B25106_014", "B25106_018", "B25106_022",
"B25106_028", "B25106_032", "B25106_036", "B25106_040", "B25106_044",
"B25106_023", "B25106_045",
"B25106_046"),
state="WA",
survey="acs5",
year=2020)
acs_housingcost <- acs_housingcost %>%
dplyr::select(., -moe, -NAME) %>%
pivot_wider(id_cols = GEOID, names_from = variable, values_from = estimate) %>%
rename(total = B25106_001) %>%
mutate(burden_gte30 = B25106_006 + B25106_010 + B25106_014 + B25106_018 +
B25106_022 + B25106_028 + B25106_032 + B25106_036 + B25106_040 + B25106_044,
zero_neg_inc = B25106_023 + B25106_045,
no_cash_rent = B25106_046,
perc_burden_gte30 = ((zero_neg_inc + burden_gte30)/total)*100) %>%
dplyr::select(GEOID, perc_burden_gte30)
### Create histogram
acs_housingcost %>% ggplot(aes(x=perc_burden_gte30)) +
geom_histogram(binwidth=1.5, fill="#0072B2", color="gray20") +
theme_minimal() +
ggtitle("Percentage considered housing cost burdened in Washington Distribution")
acs_housingcost %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
ggplot(aes(x=perc_burden_gte30)) +
geom_histogram(binwidth=1.5, fill="#009E73", color="gray20") +
theme_minimal() +
ggtitle("Percentage considered housing cost burdened in King County Distribution")
# Renter-occupied household status: B25008
# B25008_001: denominator --> total population in occupied housing units
# B25008_002: total population in owner-occupied housing
# B25008_003: total population in renter-occupied housing
acs_renterocc <- get_acs(geography="tract",
variables=c("B25008_001", "B25008_002", "B25008_003"),
state="WA",
survey="acs5",
year=2020)
acs_renterocc <- acs_renterocc %>%
dplyr::select(., -moe, -NAME) %>%
pivot_wider(id_cols = GEOID, names_from = variable, values_from = estimate) %>%
rename(total = B25008_001) %>%
mutate(perc_renter = (B25008_003/total)*100) %>%
dplyr::select(GEOID, perc_renter)
### Create histogram
acs_renterocc %>% ggplot(aes(x=perc_renter)) +
geom_histogram(binwidth=1.5, fill="#0072B2", color="gray20") +
theme_minimal() +
ggtitle("Percentage renters in Washington Distribution")
acs_renterocc %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
ggplot(aes(x=perc_renter)) +
geom_histogram(binwidth=1.5, fill="#009E73", color="gray20") +
theme_minimal() +
ggtitle("Percentage renters in King County Distribution")
# Poverty status: C17002
# C17002_001: total population for whom poverty status is determined
# C17002_002: Under .50
# C17002_003: .50 To .99
# C17002_004: 1.00 To 1.24
# C17002_005: 1.25 To 1.49
# C17002_006: 1.50 To 1.84
# C17002_007: 1.85 To 1.99
# C17002_008: 2.00 And Over
acs_lt150poverty <- get_acs(geography="tract",
variables=c("C17002_001", "C17002_002", "C17002_003", "C17002_004",
"C17002_005", "C17002_006", "C17002_007", "C17002_008"),
state="WA",
survey="acs5",
year=2020)
acs_lt150poverty <- acs_lt150poverty %>%
dplyr::select(., -moe, -NAME) %>%
pivot_wider(id_cols = GEOID, names_from = variable, values_from = estimate) %>%
rename(total = C17002_001) %>%
mutate(perc_lt150poverty = ((C17002_002 + C17002_003 + C17002_004 + C17002_005)/total)*100) %>%
dplyr::select(GEOID, perc_lt150poverty)
### Create histogram
acs_lt150poverty %>% ggplot(aes(x=perc_lt150poverty)) +
geom_histogram(binwidth=1.5, fill="#0072B2", color="gray20") +
theme_minimal() +
ggtitle("Percentage below 150% of the poverty level in Washington Distribution")
acs_lt150poverty %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
ggplot(aes(x=perc_lt150poverty)) +
geom_histogram(binwidth=1.5, fill="#009E73", color="gray20") +
theme_minimal() +
ggtitle("Percentage below 150% of the poverty level in King County Distribution")
# Median income: B21004 (since this is a continuous variable for the total applicable population, less manipulation is needed)
acs_medianinc <- get_acs(geography="tract",
variables=c("B21004_001"),
state="WA",
survey="acs5",
year=2020)
acs_medianinc <- acs_medianinc %>%
dplyr::select(., -moe, -NAME) %>%
pivot_wider(id_cols = GEOID, names_from = variable, values_from = estimate) %>%
rename(medianincome = B21004_001) %>%
dplyr::select(GEOID, medianincome)
### Create histogram
acs_medianinc %>% ggplot(aes(x=medianincome)) +
geom_histogram(binwidth=2500, fill="#0072B2", color="gray20") +
theme_minimal() +
ggtitle("Median income in Washington Distribution") +
scale_x_continuous(labels = scales::number_format())
acs_medianinc %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
ggplot(aes(x=medianincome)) +
geom_histogram(binwidth=2500, fill="#009E73", color="gray20") +
theme_minimal() +
ggtitle("Median income in King County Distribution") +
scale_x_continuous(labels = scales::number_format())
# Unemployment status: B23025
# B23025_003: total population 16 years and older in the civilian labor force
# B23025_004: employed, over 16 years and in the civilian labor force
# B23025_005: unemployed, over 16 years and in the civilian labor force
acs_unemploy <- get_acs(geography="tract",
variables=c("B23025_003", "B23025_004", "B23025_005"),
state="WA",
survey="acs5",
year=2020)
acs_unemploy <- acs_unemploy %>%
dplyr::select(., -moe, -NAME) %>%
pivot_wider(id_cols = GEOID, names_from = variable, values_from = estimate) %>%
rename(total = B23025_003) %>%
mutate(perc_unemployed = (B23025_005/total)*100) %>%
dplyr::select(GEOID, perc_unemployed)
### Create histogram
acs_unemploy %>% ggplot(aes(x=perc_unemployed)) +
geom_histogram(binwidth=0.5, fill="#0072B2", color="gray20") +
theme_minimal() +
ggtitle("Percentage of civilian population that is unemployed in Washington Distribution") +
xlim(0, 32)
acs_unemploy %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
ggplot(aes(x=perc_unemployed)) +
geom_histogram(binwidth=0.5, fill="#009E73", color="gray20") +
theme_minimal() +
ggtitle("Percentage of civilian population that is unemployed in King County Distribution") +
xlim(0, 32)
# B08201_001: total number of households
# B08201_002: total number of households with no vehicle available, not stratified by size of household
# B08201_008, B08201_014, B08201_020, B08201_026: households with no vehicle available stratified by size of household (pulled these in just as a check, but only need B08201_002 and the total to calculate our variable of interest)
acs_vehicleacc <- get_acs(geography="tract",
variables=c("B08201_001", "B08201_002", "B08201_008", "B08201_014", "B08201_020", "B08201_026"),
state="WA",
survey="acs5",
year=2020)
acs_vehicleacc <- acs_vehicleacc %>%
dplyr::select(., -moe, -NAME) %>%
pivot_wider(id_cols = GEOID, names_from = variable, values_from = estimate) %>%
rename(total = B08201_001) %>%
mutate(perc_novehicle = (B08201_002/total)*100) %>%
dplyr::select(GEOID, perc_novehicle)
### Create histogram
acs_vehicleacc %>% ggplot(aes(x=perc_novehicle)) +
geom_histogram(binwidth=1.5, fill="#0072B2", color="gray20") +
theme_minimal() +
ggtitle("Percentage of households with no vehicle access in Washington Distribution") +
xlim(0, 100)
acs_vehicleacc %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
ggplot(aes(x=perc_novehicle)) +
geom_histogram(binwidth=1.5, fill="#009E73", color="gray20") +
theme_minimal() +
ggtitle("Percentage of households with no vehicle access in King County Distribution") +
xlim(0, 100)
### Convert SVI and affluence GEOIDs to character variables for merging
svi_both$GEOID  <- as.character(svi_both$GEOID)
affluence$GEOID <- as.character(affluence$GEOID)
### CREATE QUARTILES in each dataset for Washington State as a whole and then for King County
# State-based SVI
svi_merging <- svi_both %>%
mutate(RPL_THEMES_QUARTILE_WA = ntile(RPL_THEMES, 4)) %>%
left_join(
svi_both %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
mutate(RPL_THEMES_QUARTILE_KC = ntile(RPL_THEMES, 4)) %>%
select(GEOID, RPL_THEMES_QUARTILE_KC),
by="GEOID")
# Affluence (need to flip 1 through 4 here because low=bad and high=good, opposite the other indicators)
affluence_merging <- affluence %>%
mutate(affluence_quartile_WA = ntile(AFFLUENCE16_20, 4)) %>%
left_join(
affluence %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
mutate(affluence_quartile_KC = ntile(AFFLUENCE16_20, 4)) %>%
select(GEOID, affluence_quartile_KC),
by="GEOID")
affluence_merging <- affluence_merging %>%
mutate(affluence_quartile_WA = 5 - affluence_quartile_WA,
affluence_quartile_KC = 5 - affluence_quartile_KC)
# Housing cost burden
acs_housingcost_merging <- acs_housingcost %>%
mutate(perc_burden_gte30_quartile_WA = ntile(perc_burden_gte30, 4)) %>%
left_join(
acs_housingcost %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
mutate(perc_burden_gte30_quartile_KC = ntile(perc_burden_gte30, 4)) %>%
select(GEOID, perc_burden_gte30_quartile_KC),
by="GEOID")
# Renter-occupied household status
acs_renterocc_merging <- acs_renterocc %>%
mutate(perc_renter_quartile_WA = ntile(perc_renter, 4)) %>%
left_join(
acs_renterocc %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
mutate(perc_renter_quartile_KC = ntile(perc_renter, 4)) %>%
select(GEOID, perc_renter_quartile_KC),
by="GEOID")
# Poverty status
acs_lt150poverty_merging <- acs_lt150poverty %>%
mutate(perc_lt150poverty_quartile_WA = ntile(perc_lt150poverty, 4)) %>%
left_join(
acs_lt150poverty %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
mutate(perc_lt150poverty_quartile_KC = ntile(perc_lt150poverty, 4)) %>%
select(GEOID, perc_lt150poverty_quartile_KC),
by="GEOID")
# Median income (need to flip 1 through 4 here because low=bad and high=good, opposite the other indicators)
acs_medianinc_merging <- acs_medianinc %>%
mutate(medianincome_quartile_WA = ntile(medianincome, 4)) %>%
left_join(
acs_medianinc %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
mutate(medianincome_quartile_KC = ntile(medianincome, 4)) %>%
select(GEOID, medianincome_quartile_KC),
by="GEOID")
acs_medianinc_merging <- acs_medianinc_merging %>%
mutate(medianincome_quartile_WA = 5 - medianincome_quartile_WA,
medianincome_quartile_KC = 5 - medianincome_quartile_KC)
# Unemployment status
acs_unemploy_merging <- acs_unemploy %>%
mutate(perc_unemployed_quartile_WA = ntile(perc_unemployed, 4)) %>%
left_join(
acs_unemploy %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
mutate(perc_unemployed_quartile_KC = ntile(perc_unemployed, 4)) %>%
select(GEOID, perc_unemployed_quartile_KC),
by="GEOID")
# Vehicle access
acs_vehicleacc_merging <- acs_vehicleacc %>%
mutate(perc_novehicle_quartile_WA = ntile(perc_novehicle, 4)) %>%
left_join(
acs_vehicleacc %>% filter(GEOID %in% list_kingcounty_tracts2020) %>%
mutate(perc_novehicle_quartile_KC = ntile(perc_novehicle, 4)) %>%
select(GEOID, perc_novehicle_quartile_KC),
by="GEOID")
### Merge SVI data
STEP_geocoded_data <- merge(wa_tracts2020, svi_merging, by="GEOID", all.x=TRUE)
### Merge affluence data
STEP_geocoded_data <- merge(STEP_geocoded_data, affluence_merging, by="GEOID", all.x=TRUE)
### Merge housing cost burden data
STEP_geocoded_data <- merge(STEP_geocoded_data, acs_housingcost_merging, by="GEOID", all.x=TRUE)
### Merge renter-occupied household status data
STEP_geocoded_data <- merge(STEP_geocoded_data, acs_renterocc_merging, by="GEOID", all.x=TRUE)
### Merge poverty status data
STEP_geocoded_data <- merge(STEP_geocoded_data, acs_lt150poverty_merging, by="GEOID", all.x=TRUE)
### Merge median income data
STEP_geocoded_data <- merge(STEP_geocoded_data, acs_medianinc_merging, by="GEOID", all.x=TRUE)
### Merge unemployment status data
STEP_geocoded_data <- merge(STEP_geocoded_data, acs_unemploy_merging, by="GEOID", all.x=TRUE)
### Merge vehicle access data
STEP_geocoded_data <- merge(STEP_geocoded_data, acs_vehicleacc_merging, by="GEOID", all.x=TRUE)
### Save dataset that's JUST the quartile variables, i.e., drop continuous variables
STEP_geocoded_data_quarts <- STEP_geocoded_data %>%
select(-RPL_THEMES, -RPL_THEMES_USA, -AFFLUENCE16_20, -perc_burden_gte30, -perc_renter,
-perc_lt150poverty, -medianincome, -perc_unemployed, -perc_novehicle)
View(STEP_geocoded_data)
summary(STEP_geocoded_data)
summary(STEP_geocoded_data$RPL_THEMES_QUARTILE_WA)
summary(STEP_geocoded_data$RPL_THEMES_QUARTILE_WA)
names(STEP_geocoded_data)
table1(~ factor(RPL_THEMES_QUARTILE_WA) +
factor(affluence_quartile_WA) +
factor(perc_burden_gte30_quartile_WA) +
factor(perc_renter_quartile_WA) +
factor(perc_lt150poverty_quartile_WA) +
factor(medianincome_quartile_WA) +
factor(perc_unemployed_quartile_WA) +
factor(perc_novehicle_quartile_WA),
data=STEP_geocoded_data)
missing_data <- STEP_geocoded_data %>% select(GEOID,
RPL_THEMES_QUARTILE_WA,
affluence_quartile_WA,
perc_burden_gte30_quartile_WA,
perc_renter_quartile_WA,
perc_lt150poverty_quartile_WA,
medianincome_quartile_WA,
perc_unemployed_quartile_WA,
perc_novehicle_quartile_WA)
missing_data <- which(rowSums(is.na(missing_data)) > 0)
missing_data <- as.data.frame(missing_data)
View(missing_data)
missing_data <- STEP_geocoded_data %>% select(GEOID,
RPL_THEMES_QUARTILE_WA,
affluence_quartile_WA,
perc_burden_gte30_quartile_WA,
perc_renter_quartile_WA,
perc_lt150poverty_quartile_WA,
medianincome_quartile_WA,
perc_unemployed_quartile_WA,
perc_novehicle_quartile_WA)
missing_data <- which(data$ID(is.na(missing_data)) > 0)
missing_data <- STEP_geocoded_data %>% select(GEOID,
RPL_THEMES_QUARTILE_WA,
affluence_quartile_WA,
perc_burden_gte30_quartile_WA,
perc_renter_quartile_WA,
perc_lt150poverty_quartile_WA,
medianincome_quartile_WA,
perc_unemployed_quartile_WA,
perc_novehicle_quartile_WA)
ids_with_missing <- data$ID[rowSums(is.na(data)) > 0]
missing_data <- STEP_geocoded_data %>% select(GEOID,
RPL_THEMES_QUARTILE_WA,
affluence_quartile_WA,
perc_burden_gte30_quartile_WA,
perc_renter_quartile_WA,
perc_lt150poverty_quartile_WA,
medianincome_quartile_WA,
perc_unemployed_quartile_WA,
perc_novehicle_quartile_WA)
ids_with_missing <- data$GEOID[rowSums(is.na(data)) > 0]
missing_data <- STEP_geocoded_data %>% select(GEOID,
RPL_THEMES_QUARTILE_WA,
affluence_quartile_WA,
perc_burden_gte30_quartile_WA,
perc_renter_quartile_WA,
perc_lt150poverty_quartile_WA,
medianincome_quartile_WA,
perc_unemployed_quartile_WA,
perc_novehicle_quartile_WA)
missing_data <- which(rowSums(is.na(missing_data)) > 0)
missing_data
missing_data <- STEP_geocoded_data %>% select(GEOID,
RPL_THEMES_QUARTILE_WA,
affluence_quartile_WA,
perc_burden_gte30_quartile_WA,
perc_renter_quartile_WA,
perc_lt150poverty_quartile_WA,
medianincome_quartile_WA,
perc_unemployed_quartile_WA,
perc_novehicle_quartile_WA)
missing_data <- which(missing_data$GEOID(is.na(missing_data)) > 0)
View(missing_data)
missing_data <- STEP_geocoded_data %>% select(GEOID,
RPL_THEMES_QUARTILE_WA,
affluence_quartile_WA,
perc_burden_gte30_quartile_WA,
perc_renter_quartile_WA,
perc_lt150poverty_quartile_WA,
medianincome_quartile_WA,
perc_unemployed_quartile_WA,
perc_novehicle_quartile_WA)
rows_with_na   <- which(rowSums(is.na(missing_data)) > 0)
missing_GEOID  <- missing_data$GEOID[rows_with_na]
missing_GEOID
missing_data <- STEP_geocoded_data %>% select(GEOID,
RPL_THEMES_QUARTILE_WA,
affluence_quartile_WA,
perc_burden_gte30_quartile_WA,
perc_renter_quartile_WA,
perc_lt150poverty_quartile_WA,
medianincome_quartile_WA,
perc_unemployed_quartile_WA,
perc_novehicle_quartile_WA)
rows_with_na   <- which(rowSums(is.na(missing_data)) > 0)
rows_with_na
# Create dataset to see which of the census tracts are missing this information, as they're likely industrial or park areas
missing_data <- STEP_geocoded_data %>% select(GEOID,
RPL_THEMES_QUARTILE_WA,
affluence_quartile_WA,
perc_burden_gte30_quartile_WA,
perc_renter_quartile_WA,
perc_lt150poverty_quartile_WA,
medianincome_quartile_WA,
perc_unemployed_quartile_WA,
perc_novehicle_quartile_WA)
rows_with_na   <- which(rowSums(is.na(missing_data)) > 0)
missing_GEOID  <- missing_data$GEOID[rows_with_na]
missing_GEOID  <- as.data.frame(missing_GEOID)
missing_GEOID
missing_data <- STEP_geocoded_data %>% select(GEOID,
RPL_THEMES_QUARTILE_WA,
affluence_quartile_WA,
perc_burden_gte30_quartile_WA,
perc_renter_quartile_WA,
perc_lt150poverty_quartile_WA,
medianincome_quartile_WA,
perc_unemployed_quartile_WA,
perc_novehicle_quartile_WA)
rows_with_na   <- which(rowSums(is.na(missing_data)) > 0)
missing_quart  <- missing_data$GEOID[rows_with_na]
missing_quart  <- as.data.frame(missing_GEOID)
missing_GEOID
missing_quart
rows_with_na
missing_quart
table1(~ factor(RPL_THEMES_QUARTILE_WA) +
factor(affluence_quartile_WA) +
factor(perc_burden_gte30_quartile_WA) +
factor(perc_renter_quartile_WA) +
factor(perc_lt150poverty_quartile_WA) +
factor(medianincome_quartile_WA) +
factor(perc_unemployed_quartile_WA) +
factor(perc_novehicle_quartile_WA),
data=STEP_geocoded_data)
